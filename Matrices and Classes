

#include <iostream>
#include <string>
#include <fstream>

//Do Not use Transpose_Sparse()
//Instead Transpose Matrix first then update









struct SparseMatrix{
    int V_COUNT;
    float * V;
    int* COL_INDEX;
    int* ROW_INDEX;
    SparseMatrix(){
        this->V_COUNT = NULL;
        this->V = nullptr;
        this->COL_INDEX = nullptr;
        this->ROW_INDEX = nullptr;
    }
    SparseMatrix(int v_c , float* v, int* cols , int* rows){
        this->V_COUNT = v_c;
        this->V = v;
        this->COL_INDEX = cols;
        this->ROW_INDEX = rows;
    }

    void Transpose_Sparse(){
        int i = 0;
        while(i<this->V_COUNT){
            int tmp = *(this->COL_INDEX + i);
            *(this->COL_INDEX + i ) = *(this->ROW_INDEX + i);
            *(this->ROW_INDEX + i) = tmp;
            i++;
        }


        return;
    }





};

struct Matrix  {



    int ROWS;
    int COLS;
    float ** MATRIX;
    SparseMatrix S;
    Matrix(){
        this->ROWS =  0;
        this->COLS = 0;
        this->MATRIX = nullptr;
        this->S = SparseMatrix();
    }
    void Create_Matrix_Space()
    {
        this->MATRIX = new float *[this->ROWS];
        for(int i = 0; i<this->ROWS;i++){
            this->MATRIX[i] = new float [COLS];
        }

    }

    void Print_Matrix(){

        for(int i = 0; i<ROWS; i++){

            for(int j = 0; j<COLS; j++){

                std::cout<<"["<<*( *(MATRIX + i) + j)<<"], ";
            }
            std::cout<<std::endl;
        }
    }

    void All_Zeroes() {

        for(int i = 0; i <ROWS; i++){
            for (int j = 0; j < COLS ; ++j) {

                *(*(MATRIX + i) + j) = 0;
            }
        }

    }

    Matrix Identity(int n){
        Matrix I;
        I.ROWS = n;
        I.COLS = n;
        I.Create_Matrix_Space();
        I.All_Zeroes();

        for(int i = 0; i<n; i++){
            I.MATRIX[i][i] = 1;
        }
        return  I;
    }

    Matrix TransposeMatrix(){

        Matrix TP;
        TP.ROWS  = this->COLS;
        TP.COLS = this->ROWS;
        TP.Create_Matrix_Space();
        TP.All_Zeroes();
        float ** p = TP.MATRIX;
        for(int i = 0; i <ROWS; i++){
            for (int j = 0; j < COLS; ++j)

                *(*(p+j) + i)= *(*(MATRIX + i)+j);

        }
        return TP;


    }

    Matrix Negate(){
        Matrix Out;
        Out.ROWS = this->ROWS;
        Out.COLS = this->COLS;
        Out.Create_Matrix_Space();
        Out.All_Zeroes();
        for(int i = 0; i<this->ROWS; i++){
            for(int j = 0; j<this->COLS; j++){
                Out.MATRIX[i][j] = -(this->MATRIX[i][j]);
            }

        }
        return Out;
    }

    void AddElement(int r , int c, float v){

        if(r>ROWS || r<0 || c>COLS || c<0){

        }
        else{
            if(MATRIX[r][c]!= 0){
            }
            MATRIX[r][c] = v;
        }


    }

    void UpdateSparse(){
        //order of sparse matrix representaion

        S.V_COUNT = 0;
        if(S.ROW_INDEX!= nullptr&&S.COL_INDEX!= nullptr&&S.V!=nullptr) {
            delete[] S.ROW_INDEX;
            delete[] S.COL_INDEX;
            delete[] S.V;
            //protect from dangling pointers
            S.ROW_INDEX = nullptr;
            S.COL_INDEX = nullptr;
            S.V = nullptr;
        }

        int l,m,k;

        l = 0;
        m = 0;
        k = 0;

        while(l<this->ROWS){
            while(m<this->COLS){
                if(this->MATRIX[l][m] != 0) {
                    k++;
                }
                m++;
            }
            l++;
        }

        S.ROW_INDEX = new int[k];
        S.COL_INDEX = new int[k];
        S.V = new float [k];

        for (int i = 0; i < this->ROWS; ++i) {
            for (int j = 0; j < this->COLS; ++j) {
                if(this->MATRIX[i][j] != 0){
                    S.V[S.V_COUNT] = MATRIX[i][j];
                    S.ROW_INDEX[S.V_COUNT] = i;
                    S.COL_INDEX[S.V_COUNT] = j;
                    S.V_COUNT++;
                }
            }
        }

    }





};

/*SparseMatrix Matrix_To_Sparse(Matrix &A){
    A.UpdateSparse();
    return A.S;
}*/

/*SparseMatrix Matrix_Transpose_To_Sparse(Matrix &A){
    A.TransposeMatrix();
    return A.S;
}*/


struct NetList{
    int rows;
    int Source_Count = 1;
    int Resistor_Count = 1;
    std::string** NetList_Matrix = nullptr;

    //User Friendly Interface in works

    NetList(){
        rows = 0;
        Source_Count = 1;
        Resistor_Count = 1;
        NetList_Matrix  = nullptr;
    }
    NetList(std::string filename){

        std::string line;
        std::string file_name = filename;
        std::ifstream file_(file_name);

        std::string buffer_component;
        std::string buffer_source_node;
        std::string buffer_source_destination;
        std::string buffer_component_value;
        this->rows = 0;

        if(file_.is_open()){
            std::cout<<"File Successfully Opened"<<std::endl;
            while (std::getline(file_, line)){
                ++this->rows;}


            file_.close();
        }
        else{
            std::cout<<"File is closed  or wrong file name"<<std::endl;
        }

        this->NetList_Matrix = new std::string*[this->rows];
        for(int i=0; i<this->rows; i++){
            this->NetList_Matrix[i] = new std::string [4];

        }

        file_.close();
        file_.open(file_name);



        if(file_.is_open()){
            int i = 0;
            while(file_>>buffer_component>>buffer_source_node>>buffer_source_destination>>buffer_component_value||line.empty()){
                *(*(this->NetList_Matrix+i)+0) = buffer_component;
                *(*(this->NetList_Matrix+i) +1) = buffer_source_node;
                *(*(this->NetList_Matrix+i) +2) = buffer_source_destination;
                *(*(this->NetList_Matrix+ i) +3) = buffer_component_value;
                i++;


            }

        }

        file_.close();





    }


    void Print_Netlist(){
        for(int i = 0; i<this->rows;i++){
            for(int j = 0; j <4; j++){
                std::cout<<"["<<NetList_Matrix[i][j]<<"]";
            }
            std::cout<<std::endl;
        }
    }
};


struct IncidenceMatrix{

    NetList A ;
    int Row_Size = 0;
    int Col_Size = 0;
    Matrix Incidence_Matrix;
    Matrix Transpose_Incidence_Matrix;
    SparseMatrix Incidence_Sparse;


    //inorder
    //
    float* Node_Voltages;

    IncidenceMatrix(){

        this->A = NetList();
        this->Incidence_Matrix = Matrix();
        this->Transpose_Incidence_Matrix = Matrix();

    }
    IncidenceMatrix(std::string filename){

        this->A = NetList(filename);

    //find voltage and resistance values to create their column vectors
        /*int k = 0;
        while('V' == A.NetList_Matrix[k][0][0]){
            k++;
        }
        int k0 = k;
        this->Voltage_Sources = new float[k];

        while('R' == A.NetList_Matrix[k0][0][0]&&k0<A.rows){
            k0++;
        }

        this->Resistances = new float[k-k0];
        //Number of Connections - Independent Sources.
        int branch_count = k-k0;
        int l = 0;

        while(l<k0){
            Voltage_Sources[l]  = std::stof(A.NetList_Matrix[l][3]);
            l++;
        }

        while (l<k){
            Resistances[l] = std::stof(A.NetList_Matrix[l][3]);
            l++;
        }*/

        //find max node
        int l =0;
        float node_count = 0;
        while(l<A.rows){

            if ((std::stof(A.NetList_Matrix[l][1])) > node_count) {

                node_count = std::stof(A.NetList_Matrix[l][1]);

            }

           l++;


        }

        //actual incidence matrix conversion

        Incidence_Matrix.ROWS = node_count;
        // ROWS =  Branches
        Incidence_Matrix.COLS = A.rows;

        Incidence_Matrix.Create_Matrix_Space();
        Incidence_Matrix.All_Zeroes();
        //rows 0-n
        for(int i = 0; i < A.rows; i++){
            //i = branch
            int source_node = 0;
            int destination_node = 0;

            source_node = std::stof(A.NetList_Matrix[i][1]);
            destination_node = std::stof(A.NetList_Matrix[i][2]);

            int actual_source = source_node -1;
            int actual_destination = destination_node -1;
            Incidence_Matrix.AddElement(actual_source,i,1);
            Incidence_Matrix.AddElement(actual_destination,i,-1);



        }
        this->Transpose_Incidence_Matrix = Incidence_Matrix.TransposeMatrix();
        Matrix Test = Transpose_Incidence_Matrix.Negate();



        Row_Size = Incidence_Matrix.ROWS;
        Col_Size = Incidence_Matrix.COLS;

        //Incidence_Matrix.UpdateSparse();

        //Incidence_Sparse = Incidence_Matrix.S;



    }
};


struct Equation_Matrix{
    IncidenceMatrix A;
    //A^Te = V
    Matrix BRANCH_VOLTAGE_COEFF;
    //ARRAY OF VOLTAGE  COEFFICENTS;
    //ARRAY OF RESISTANCES
    Matrix Row_1;
    Matrix Row_2;
    Matrix Row_3;
    float** Total_Coefficient_Matrix;
    float* Resistances;
    float* IVS;
    float*Constants;
    int IVS_COUNT;
    int TCM_ROWS;
    int TCM_COLS;
    Equation_Matrix(std::string filename){
        this->A = IncidenceMatrix(filename);
        //Big Generation

        //Row1
        this->Row_1.ROWS = A.Incidence_Matrix.ROWS;
        this->Row_1.COLS = this->Row_1.ROWS + 2*this->A.Incidence_Matrix.COLS;
        this->Row_1.Create_Matrix_Space();
        this->Row_1.All_Zeroes();
        for(int i = 0; i<this->Row_1.ROWS; i++) {

            for (int j = (this->Row_1.ROWS + this->A.Incidence_Matrix.COLS); j < this->Row_1.COLS; j++) {
                this->Row_1.MATRIX[i][j] =
                        this->A.Incidence_Matrix.MATRIX[i][j-((this->Row_1.ROWS + this->A.Incidence_Matrix.COLS))];
            }
        }
        //Row 2
        this->BRANCH_VOLTAGE_COEFF = A.Transpose_Incidence_Matrix.Negate();

        this->Row_2.ROWS = this->BRANCH_VOLTAGE_COEFF.ROWS;
        this->Row_2.COLS = this->Row_1.COLS;
        this->Row_2.Create_Matrix_Space();
        this->Row_2.All_Zeroes();

        int i = 0;
        int j = 0;

        while(j<this->BRANCH_VOLTAGE_COEFF.COLS){
            while(i<this->BRANCH_VOLTAGE_COEFF.ROWS){
                this->Row_2.MATRIX[i][j] = this->BRANCH_VOLTAGE_COEFF.MATRIX[i][j];
                i++;
            }
            i = 0;
            j++;
        }

        while (i<this->BRANCH_VOLTAGE_COEFF.ROWS){
            this->Row_2.MATRIX[i][j+i] = 1;
            i++;
        }
        //Row 3
        this->Row_3.ROWS = this->Row_2.ROWS;
        this->Row_3.COLS = this->Row_2.COLS;
        this->Row_3.Create_Matrix_Space();
        this->Row_3.All_Zeroes();

        this->IVS = new float[this->Row_1.ROWS + this->Row_2.ROWS + this->Row_3.ROWS];

        for(int i = 0; i< (this->Row_1.ROWS + this->Row_2.ROWS); i++){
            this->IVS[i] = 0;
        }

        for(int i = 0; i<this->A.Incidence_Matrix.COLS;i++){

            this->Row_3.MATRIX[i][Row_3.COLS - 2*(A.Incidence_Matrix.COLS) + i] = 1;
          if(this->A.A.NetList_Matrix[i][0][0] == 'V'){
              this->IVS[i+this->Row_1.ROWS + this->Row_2.ROWS] = std::stof(this->A.A.NetList_Matrix[i][3]);
              this->Row_3.MATRIX[i][this->Row_3.COLS-(this->A.Incidence_Matrix.COLS)+i]= 0;
          }
          else{
              this->IVS[i + this->Row_1.ROWS + this->Row_2.ROWS] = 0;
              this->Row_3.MATRIX[i][this->Row_3.COLS-(this->A.Incidence_Matrix.COLS)+i] = -std::stof(this->A.A.NetList_Matrix[i][3]);

          }
      }





        //Stackin procedure
        /*//appension
        int x = 0;
        int a = 0;
        int b = 0;
        TCM_ROWS = Row_1.ROWS + Row_2.ROWS + Row_3.ROWS;
        TCM_COLS = TCM_ROWS;
        this->Total_Coefficient_Matrix = new float*[TCM_ROWS];
        std::cout<<"Reached"<<std::endl;
        for(int i = 0; i<TCM_ROWS;i++){
            this->Total_Coefficient_Matrix[i] = new float [TCM_COLS];
        }

       for(int i = 0; i<TCM_ROWS; i++){
           for(int j = 0; j<TCM_COLS; j++){
               if(x<Row_1.ROWS*Row_1.COLS) {
                   Total_Coefficient_Matrix[i][j] = Row_1.MATRIX[a][b];
                   x++;

               }
               else if(x>=Row_1.ROWS*Row_1.COLS && x<(Row_2.ROWS*Row_2.COLS+Row_1.ROWS*Row_1.COLS)){
                   Total_Coefficient_Matrix[i][j] = Row_2.MATRIX[a][b];
                   x++;
               }
               else{
                   Total_Coefficient_Matrix[i][j] = Row_3.MATRIX[a][b];
               }

               if(x==Row_1.ROWS*Row_1.COLS){
                   a = 0;
                   b = 0;
               }

               if(x == (Row_1.ROWS*Row_1.COLS+Row_2.ROWS*Row_2.COLS) ){
                   a = 0;
                   b = 0;
               }

               b++;

           }
           b=0;
           a++;
       }*/
        int x = 0;
        int a = 0;
        int b = 0;
        this-> TCM_ROWS = Row_1.ROWS + Row_2.ROWS + Row_3.ROWS;
        this-> TCM_COLS = Row_1.COLS; // Assuming the number of columns remains the same for all matrices
        this->Total_Coefficient_Matrix = new float*[TCM_ROWS];

        for(int i = 0; i < TCM_ROWS; i++){
            this->Total_Coefficient_Matrix[i] = new float[TCM_COLS];
        }

        for(int i = 0; i < TCM_ROWS; i++){
            for(int j = 0; j < TCM_COLS; j++){
                if(x < Row_1.ROWS * Row_1.COLS) {
                    Total_Coefficient_Matrix[i][j] = Row_1.MATRIX[a][b];
                    x++;
                }
                else if(x >= Row_1.ROWS * Row_1.COLS && x < (Row_2.ROWS * Row_2.COLS + Row_1.ROWS * Row_1.COLS)){
                    Total_Coefficient_Matrix[i][j] = Row_2.MATRIX[a][b];
                    x++;
                }
                else{
                    Total_Coefficient_Matrix[i][j] = Row_3.MATRIX[a][b];
                    x++;
                }

                if(x == Row_1.ROWS * Row_1.COLS){
                    a = 0;
                    b = 0;
                }

                if(x == (Row_1.ROWS * Row_1.COLS + Row_2.ROWS * Row_2.COLS)){
                    a = 0;
                    b = 0;
                }

                b++;
            }
            a++;
            if (i == Row_1.ROWS - 1 || i == Row_1.ROWS + Row_2.ROWS - 1) {
                a = 0;
            }
            b = 0;
        }









    }


    void Print_EQ_Matrix(){

        for(int i = 0; i<TCM_ROWS; i++){

            for(int j = 0; j<TCM_COLS; j++){

                std::cout<<"["<<Total_Coefficient_Matrix[i][j]<<"] ";
            }
            std::cout<<std::endl;
        }
    }

    };













