#include <iostream>
#include <string>
#include <fstream>
#include "MATRICES.cpp"

using namespace std;

/*void PrintSolutions(float * X, int n,int nodes){

    for(int i = 0; i<n; i++){
        std::cout<<X[i]<<std::endl;
    }

}*/


void PrintSolutions(float* X, int nodes)
{
    int index = 0;

    for (int i = 1; i <= nodes - 1; i++)
    {
        cout << "E" << i << " = " << X[index] << " V" << endl;
        index++;
    }

    for (int i = 1; i <= nodes; i++)
    {
        cout << "V(R" << i<<") = " << X[index] << " V" << endl;
        index++;
    }

    for (int i = 1; i <= nodes; i++)
    {
        cout << "I(R" << i << ") = " << X[index] << " A" << endl;
        index++;
    }

}


float * solveSystem(float ** A, float * B, int n) {
    // Forward elimination with row pivoting

    float * X = new float [n];

    for (int i = 0; i < n; i++) {

        // Check if the diagonal coefficient is zero and perform row pivoting if needed
        if (A[i][i] == 0) {
            int pivot = i + 1;
            while (pivot < n && A[pivot][i] == 0) {
                pivot++;
            }

            // Swap rows to avoid division by zero
            swap(A[i], A[pivot]);
            swap(B[i], B[pivot]);
        }

        for (int j = i + 1; j < n; j++) {
            float factor = A[j][i] / A[i][i];
            for (int k = i; k < n; k++) {
                A[j][k] -= factor * A[i][k];
            }
            B[j] -= factor * B[i];
        }
    }

    // Backward substitution
    for (int i = n - 1; i >= 0; i--) {
        X[i] = B[i] / A[i][i];
        for (int j = i + 1; j < n; j++) {
            X[i] -= A[i][j] * X[j] / A[i][i];
        }
    }

    return X;
}

int main() {

    string file_placeholder = "../test_cases/";
    string file_netlist;
    int selection;
    bool LOOP = true;
    cout << "Welcome To SPICE in C++! Follow the menu below: " << endl;

    while (LOOP)
    {
        cout << "1 Calculations" << endl;
        cout << "2 Quit"<<endl;
        cout << "Please type in an integer corresponding to the action you would like to commit:   ";
        cin >> selection;

        if (selection == 1)
        {
            cout <<endl<< "Please type in the file name of the netlist" << endl;
            cout<<"This program will calculate node volatages, voltage  drops and currents"<<endl;
            cout << "Example: test_ex1_netlist.txt" << endl << "Filename: ";
            cin >> file_netlist;
            string file = file_placeholder + file_netlist;
            Equation_Matrix C  = Equation_Matrix(file);
            std::cout<<"_________Solutions________________"<<std::endl;
            float * X = solveSystem(C.Total_Coefficient_Matrix,C.IVS,C.TCM_ROWS);
            PrintSolutions(X,((C.TCM_ROWS+1)/3));

            cout << file << endl;

            cout << "Note: V represents voltage drops, E represents voltages at nodes (refer to document for excursion" << endl;
            //Rest of stuff to do solution


        }
        else if (selection == 2)
        {
            LOOP = false;
        }
    }

    cout << "Thank you for using our SPICE calculation program. Have a great day!" << endl;

    return 0;
}
/*std::string line;
std::string file_name = "test_cases/test_ex1_netlist.txt";
std::ifstream file_(file_name);

std::string buffer_component;
std::string buffer_source_node;
std::string buffer_source_destination;
std::string buffer_component_value;
int netlist_row_size = 0;

if(file_.is_open()){
    std::cout<<"is open"<<std::endl;
    while (std::getline(file_, line))
        ++netlist_row_size;

    std::cout<<netlist_row_size<<std::endl;
    file_.close();
}
else{
    std::cout<<"is closed"<<std::endl;
}
std::string ** NetList_2D = new std::string*[netlist_row_size];
NetList_2D = new std::string *[netlist_row_size];
for(int i = 0; i<netlist_row_size;i++){
    NetList_2D[i] = new std::string [4];
}

file_.close();
file_.open(file_name);



if(file_.is_open()){
    int i = 0;
    while(file_>>buffer_component>>buffer_source_node>>buffer_source_destination>>buffer_component_value){
        *(*(NetList_2D+i)+0) = buffer_component;
        *(*(NetList_2D+i) +1) = buffer_source_node;
        *(*(NetList_2D+i) + 2) = buffer_source_destination;
        *(*(NetList_2D + i) + 3) = buffer_component_value;
        i++;


    }

}
std::cout<<NetList_2D[0][2]<<std::endl;*/
